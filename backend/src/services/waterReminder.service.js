const WaterReminderSetting = require('../models/waterReminderSetting.model');
const { generateSchedule } = require('../utils/generateSchedule');
const { sendPushNotification } = require('./expoPush.service');

exports.updateSetting = async (userId, data) => {
    return await WaterReminderSetting.findOneAndUpdate(
        { userId },
        data,
        { new: true, upsert: true }
    );
};

exports.getSetting = async (userId) => {
    return await WaterReminderSetting.findOne({ userId });
};

exports.getSchedule = (setting) => {
    return generateSchedule(setting.wakeUpTime, setting.sleepTime, setting.reminderGap);
};

exports.sendReminders = async () => {
    const now = new Date();
    const currentTimeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    const settings = await WaterReminderSetting.find();
    for (const setting of settings) {
        console.log(`User ${setting.userId}: wakeUpTime = ${setting.wakeUpTime}, sleepTime = ${setting.sleepTime}, reminderGap = ${setting.reminderGap}`);
        const schedule = setting.schedule;
        // // Log k·∫øt qu·∫£ so s√°nh cho t·ª´ng kho·∫£ng th·ªùi gian trong l·ªãch
        // for (const item of schedule) {
        //     const isMatch = (item.time === currentTimeStr);
        //     console.log(`So s√°nh: Th·ªùi gian nh·∫Øc ${item.time} v√† th·ªùi gian hi·ªán t·∫°i ${currentTimeStr} => ${isMatch ? "Tr√πng kh·ªõp" : "Kh√¥ng tr√πng"}`);
        // }

        // T√¨m m·ª•c trong l·ªãch m√† tr√πng kh·ªõp v·ªõi th·ªùi gian hi·ªán t·∫°i
        const match = schedule.find(item => item.time === currentTimeStr);

        if (match && setting.expoPushToken && setting.expoPushToken.startsWith('ExponentPushToken')) {
            try {
                await sendPushNotification(
                    setting.expoPushToken,
                    'üíß Nh·∫Øc nh·ªü u·ªëng n∆∞·ªõc',
                    `ƒê√£ ƒë·∫øn l√∫c u·ªëng ${match.amount} n∆∞·ªõc!`,
                    { type: 'water-reminder' }
                );
                console.log(`ƒê√£ g·ª≠i nh·∫Øc nh·ªü cho user ${setting.userId} v·ªõi token ${setting.expoPushToken} l√∫c ${currentTimeStr}`);
            } catch (err) {
                console.error(`L·ªói g·ª≠i nh·∫Øc nh·ªü cho user ${setting.userId}:`, err.message);
            }
        }
    }
};
